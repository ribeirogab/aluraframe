{"version":3,"sources":["../../../src/domain/trades/TradeDao.js"],"names":["Trade","TradeDao","constructor","connection","_connection","_store","add","trades","Promise","resolve","reject","request","transaction","objectStore","onsuccess","e","onerror","console","log","target","error","name","deleteAll","clear","listAll","openCursor","current","result","push","value","_date","_amount","_value","continue"],"mappings":";;;;;;AAASA,W,YAAAA,K;;;AAEF,YAAMC,QAAN,CAAc;AACnBC,oBAAYC,UAAZ,EAAuB;AACrB,eAAKC,WAAL,GAAmBD,UAAnB;AACA,eAAKE,MAAL,GAAc,QAAd;AACD;;AAEDC,YAAIC,MAAJ,EAAW;AACT,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKP,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGbC,GAHa,CAGTC,MAHS,CAAhB;;AAKAI,oBAAQG,SAAR,GAAoBC,KAAKN,SAAzB;;AAEAE,oBAAQK,OAAR,GAAkBD,KAAK;AACrBE,sBAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,qBAAOK,EAAEI,MAAF,CAASC,KAAT,CAAeC,IAAtB;AACD,aAHD;AAID,WAZM,CAAP;AAaD;;AAEDC,oBAAY;AACV,iBAAO,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKP,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGbkB,KAHa,EAAhB;;AAKAZ,oBAAQG,SAAR,GAAoBC,KAAKN,SAAzB;;AAEAE,oBAAQK,OAAR,GAAkBD,KAAK;AACrBL,qBAAOK,EAAEI,MAAF,CAASC,KAAhB;AACD,aAFD;AAGD,WAXM,CAAP;AAYD;;AAEDI,kBAAS;AACP,iBAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMH,SAAS,EAAf;AACA,kBAAMI,UAAU,KAAKP,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGboB,UAHa,EAAhB;;AAKAd,oBAAQG,SAAR,GAAoBC,KAAK;AACvB,oBAAMW,UAAUX,EAAEI,MAAF,CAASQ,MAAzB;AACA,kBAAGD,OAAH,EAAW;AACTnB,uBAAOqB,IAAP,CACE,IAAI5B,KAAJ,CACE0B,QAAQG,KAAR,CAAcC,KADhB,EAEEJ,QAAQG,KAAR,CAAcE,OAFhB,EAGEL,QAAQG,KAAR,CAAcG,MAHhB,CADF;AAOAN,wBAAQO,QAAR;AACD,eATD,MASO;AACLxB,wBAAQF,MAAR;AACD;AACF,aAdD;;AAgBAI,oBAAQK,OAAR,GAAkBD,KAAK;AACrBE,sBAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,qBAAOK,EAAEI,MAAF,CAASC,KAAT,CAAeC,IAAtB;AACD,aAHD;AAID,WA3BM,CAAP;AA4BD;AAlEkB","file":"TradeDao.js","sourcesContent":["import { Trade } from \"./Trade.js\";\n\nexport class TradeDao{\n  constructor(connection){\n    this._connection = connection\n    this._store = 'trades'\n  }\n\n  add(trades){\n    return new Promise((resolve, reject) => {\n      const request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .add(trades)\n\n      request.onsuccess = e => resolve()\n\n      request.onerror = e => {\n        console.log(e.target.error)\n        reject(e.target.error.name)\n      }\n    })\n  }\n\n  deleteAll() {\n    return new Promise((resolve, reject) => {\n      const request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .clear()\n\n      request.onsuccess = e => resolve()\n\n      request.onerror = e => {\n        reject(e.target.error)\n      }\n    })\n  }\n\n  listAll(){\n    return new Promise((resolve, reject) => {\n      const trades = []\n      const request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .openCursor()\n\n      request.onsuccess = e => {\n        const current = e.target.result\n        if(current){\n          trades.push(\n            new Trade(\n              current.value._date,\n              current.value._amount,\n              current.value._value,\n            )\n          )\n          current.continue()\n        } else {\n          resolve(trades)\n        }\n      }\n\n      request.onerror = e => {\n        console.log(e.target.error)\n        reject(e.target.error.name)\n      }\n    })\n  }\n}"]}